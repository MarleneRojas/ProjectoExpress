<div class='row'>

<div class="col s4 m5">
      <div class="card">
        <div class="card-image">
          <img src="./images/MVC.png">
          <span class="card-title Black-text">Modelo Vista Controlador</span>
        </div>
        <div class="card-content">
          <p>MVC (Modelo-Vista-Controlador) es un patrón en el diseño de software comúnmente utilizado para implementar interfaces de usuario, datos y
          lógica de control. Enfatiza una separación entre la lógica de negocios y su visualización.</p>
        </div>
      </div>
    </div>

    <div class="col s4 m7">
      <div class="card">
        <div class="card-image">
          <img src="./images/MVC2.jpg">
          <span class="card-title black-text">Modelo Vista Controlador</span>
        </div>
        <div class="card-content">
          <p>Las tres partes del patrón de diseño de software MVC se pueden describir de la siguiente manera: </p>
          <p>Modelo: Maneja datos y lógica de negocios.</p>
          <p>Vista: Se encarga del diseño y presentación.</p>
          <p>Controlador: Enruta comandos a los modelos y vistas.</p>
        </div>
      </div>
    </div>

  <div class="col s4 m5">
      <div class="card">
        <div class="card-image">
          <img src="./images/Mat.png">
          <span class="card-title black-text">Materialize CSS:</span>
        </div>
        <div class="card-content">
          <p>proporcionado documentación detallada, así como ejemplos de
              códigos específicos para ayudar a los nuevos usuarios a comenzar.
              También estamos siempre abiertos a recibir comentarios y podemos
              responder cualquier pregunta que un usuario pueda tener sobre
              Materialise.</p>
        </div>
      </div>
    </div>

<div class="col s4 m7">
      <div class="card">
        <div class="card-image">
          <img src="./images/Git.png">
          <span class="card-title black-text">Que es Git:</span>
        </div>
        <div class="card-content">
          <p>Las características básicas de rendimiento de Git son muy sólidas en comparación con muchas otras alternativas. La confirmación de nuevos cambios, la ramificación, la fusión y la comparación de versiones anteriores se han optimizado en favor del rendimiento. Los algoritmos implementados en Git aprovechan el profundo conocimiento sobre los atributos comunes de los auténticos árboles de archivos de código fuente, cómo suelen modificarse con el paso del tiempo y cuáles son los patrones de acceso.</p>
        </div>
      </div>
    </div>   
    </div>
  </div>
</div>


<div class=''>
  <h2>Acerca de </h2>
  <p>App que permite registrar proyectos</p>
  <p>Version: {{appVersion}} </p>
</div>